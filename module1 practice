import java.util.ArrayList;
import java.util.List;

abstract class Vehicle {
    private String brand;
    private String model;
    private int year;

    public Vehicle(String brand, String model, int year) {
        this.brand = brand;
        this.model = model;
        this.year = year;
    }

    public String getBrand() { return brand; }
    public String getModel() { return model; }
    public int getYear() { return year; }

    public void startEngine() {
        System.out.println(brand + " " + model + " завел двигатель.");
    }

    public void stopEngine() {
        System.out.println(brand + " " + model + " заглушил двигатель.");
    }

    @Override
    public String toString() {
        return brand + " " + model + " (" + year + ")";
    }
}

class Car extends Vehicle {
    private int doors;
    private String transmission;

    public Car(String brand, String model, int year, int doors, String transmission) {
        super(brand, model, year);
        this.doors = doors;
        this.transmission = transmission;
    }

    @Override
    public String toString() {
        return super.toString() + " | Дверей: " + doors + ", Трансмиссия: " + transmission;
    }
}

class Motorcycle extends Vehicle {
    private String bodyType;
    private boolean hasBox;

    public Motorcycle(String brand, String model, int year, String bodyType, boolean hasBox) {
        super(brand, model, year);
        this.bodyType = bodyType;
        this.hasBox = hasBox;
    }

    @Override
    public String toString() {
        return super.toString() + " | Тип кузова: " + bodyType + ", Бокс: " + (hasBox ? "есть" : "нет");
    }
}

class Garage {
    private List<Vehicle> vehicles = new ArrayList<>();

    public void addVehicle(Vehicle vehicle) {
        vehicles.add(vehicle);
        System.out.println(vehicle + " добавлен в гараж.");
    }

    public void removeVehicle(Vehicle vehicle) {
        vehicles.remove(vehicle);
        System.out.println(vehicle + " удален из гаража.");
    }

    public List<Vehicle> getVehicles() {
        return vehicles;
    }
}

class Fleet {
    private List<Garage> garages = new ArrayList<>();

    public void addGarage(Garage garage) {
        garages.add(garage);
        System.out.println("Гараж добавлен в автопарк.");
    }

    public void removeGarage(Garage garage) {
        garages.remove(garage);
        System.out.println("Гараж удален из автопарка.");
    }

    public void findVehicle(String brand, String model) {
        for (Garage garage : garages) {
            for (Vehicle v : garage.getVehicles()) {
                if (v.getBrand().equalsIgnoreCase(brand) && v.getModel().equalsIgnoreCase(model)) {
                    System.out.println("Найдено: " + v);
                    return;
                }
            }
        }
        System.out.println("Транспортное средство " + brand + " " + model + " не найдено.");
    }
}

public class Main {
    public static void main(String[] args) {
        // Создаем транспорт
        Car car1 = new Car("Toyota", "Camry", 2020, 4, "Автомат");
        Car car2 = new Car("BMW", "X5", 2022, 5, "Механика");
        Motorcycle moto1 = new Motorcycle("Yamaha", "MT-07", 2019, "Спорт", false);
        Motorcycle moto2 = new Motorcycle("Harley-Davidson", "Street 750", 2021, "Круизер", true);

        // Создаем гаражи
        Garage garage1 = new Garage();
        Garage garage2 = new Garage();

        // Добавляем транспорт в гаражи
        garage1.addVehicle(car1);
        garage1.addVehicle(moto1);

        garage2.addVehicle(car2);
        garage2.addVehicle(moto2);

        // Создаем автопарк
        Fleet fleet = new Fleet();
        fleet.addGarage(garage1);
        fleet.addGarage(garage2);

        // Поиск транспорта
        fleet.findVehicle("Toyota", "Camry");
        fleet.findVehicle("Honda", "Civic");

        // Удаление
        garage1.removeVehicle(car1);
        fleet.removeGarage(garage2);
    }
}
